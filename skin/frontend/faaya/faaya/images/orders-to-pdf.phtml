<?php        
	ini_set("memory_limit", "512M");
	set_time_limit(0);
   // $tcpdf = new TCPDF_TCPDF();

	function strip_selected_tags($text, $tags = array()) {
		$args = func_get_args();
		$text = array_shift($args);
		$tags = func_num_args() > 2 ? array_diff($args,array($text)) : (array)$tags;
		foreach ($tags as $tag){
			$regExp = '/<'.$tag.'[^>]*>(.*)/iU';		
			if(preg_match_all($regExp, $text, $found)){
				$text = str_replace($found[0],$found[1],$text);
			}
		}
	
		return $text;
	}

	function br2nl( $input ) {
    	return preg_replace('/<br\s?\/?>/ius', "\n", str_replace("\n","",str_replace("\r","", htmlspecialchars_decode($input))));
	}

	// Create array to hold specified order ids
	$_orderIds = Array();
	
	// Catalog output helper
	$_helper = $this->helper('catalog/output');	
	
	// Reference to the order id(s) param
	$_id = $_GET['id'];
	
	// If the querystring param 'id' contains a comma, assume there is more than 1 order id specified
	// and explode value into an array
	if(strpos($_id, ",") !== FALSE) {
		$_orderIds = explode(",", $_id);
		
	// Otherwise, assume only one order id has been specified, load the order and to array
	} else {
		array_push($_orderIds, $_id);
	}

	// Create array to hold order objects
	$_orders = Array();
	
	// Using the order ids specified, load each order and add to array
	for($i = 0; $i < count($_orderIds); $i++) {
		$_order = Mage::getModel("sales/order")->load($_orderIds[$i]);
		array_push($_orders, $_order);
	}

	// Read in HTML template files
	$templateHeader = file_get_contents($_SERVER['DOCUMENT_ROOT'] . "/dompdf/orders-to-pdf-header.html");			
	$templateFooter = file_get_contents($_SERVER['DOCUMENT_ROOT'] . "/dompdf/orders-to-pdf-footer.html");

	// Variable to hold concatenated HTML
	$template = "";
	
	$filename = "order" . (count($_orders) > 1 ? "s" : "") . "-";
	for($i = 0; $i < count($_orders); $i++) {
		$filename .= $_orders[$i]->getId();
		if($i != count($_orders) - 1) $filename .= "-";
	}

	for($i = 0; $i < count($_orders); $i++) {	
		// Get reference to pre-loaded order
		$_order = $_orders[$i];

		$j = 1;

		foreach($_order->getItemsCollection() as $_orderItem) {
			Mage::log("Order item: " . $j);
			
			$quantity = $_orderItem->getQtyOrdered();

			for($k = 0; $k < $quantity; $k++) {			
				$templateContent = file_get_contents($_SERVER['DOCUMENT_ROOT'] . "/dompdf/orders-to-pdf-content.html");
		
				$messageObj = Mage::getModel("giftmessage/message")->load($_orderItem->getGiftMessageId());
				$sender = $messageObj->getData("sender");
				$recipient = $messageObj->getData("recipient");
				$message = $messageObj->getData("message");
				
				// Get reference to product
				$_product = Mage::getModel("catalog/product")->load($_orderItem->getProductId());
				
				$_additionalData = Array();
	
				// Get additional data (attributes) for product - code taken from app/code/core/Mage/catalog/Block/product/view/Attributes.php
				$attributes = $_product->getAttributes();
				foreach ($attributes as $attribute) {		
					$value = $attribute->getFrontend()->getValue($_product);
					if (is_string($value)) {
						if (strlen($value) && $_product->hasData($attribute->getAttributeCode())) {
							if ($attribute->getFrontendInput() == 'price') {
								$value = Mage::app()->getStore()->convertPrice($value,true);
							} elseif (!$attribute->getIsHtmlAllowedOnFront()) {
								$value = $this->htmlEscape($value);
							}
							$_additionalData[$attribute->getAttributeCode()] = array(
							   'label' => $attribute->getFrontend()->getLabel(),
							   'value' => $value,
							   'code'  => $attribute->getAttributeCode()
							);
						}
					}
				}
				
				$certNumber = $_order->getData("increment_id") . "-" . $_orderItem->getId();
				if($quantity > 1) {
					$certNumber .= "#" . ($k + 1);
				}
				
				$pageBreak = "";
				if($i != count($_orders) - 1) {
					$pageBreak = "order-item";

				} else if($j != $_order->getItemsCollection()->count()) {
					$pageBreak = "order-item";
				
				} else if($k != $quantity - 1) {
					$pageBreak = "order-item";
				}

				// Define replaceable tokens
				$tokens = Array(
					"NAME" => $recipient,
					"FROM" => $sender,
					"GIFT-MESSAGE" => $message,
					"CERTIFICATE-NUMBER" => $certNumber,
					"ORDER-DATE" => Mage::helper('core')->formatDate($_order->getCreatedAtStoreDate(), 'medium', false),
					"PRODUCT-TITLE" => $_product->getName(),
					"PRODUCT-CODE" => $_product->getSku(),
					"PRODUCT-DESCRIPTION" => strip_selected_tags($_product->getDescription(), Array("img")),
					"TERMS-AND-CONDITIONS" => array_key_exists("terms_and_conditions", $_additionalData) ? $_additionalData['terms_and_conditions']['value'] : "",
					"LOCATIONS-TEXT" => array_key_exists("locations_available", $_additionalData) ? br2nl($_additionalData['locations_available']['value']) : "",
					"PAGE-BREAK" => $pageBreak,
				);
				
				// INCLUDES LIST
				$includesList = Array();
				for($x = 1; $x <= 8; $x++) {
					if(array_key_exists('includes_list_header_' . $x, $_additionalData) && array_key_exists('includes_list_text_' . $x, $_additionalData)) {
					
						$includesList[] = Array(
							"heading" => $_additionalData['includes_list_header_' . $x]['value'],
							"text" => $_helper->productAttribute($_product, $_additionalData['includes_list_text_' . $x]['value'], 'includes_list_text_' . $x)
						);
					}
				}
				
				if(count($includesList)) {
					$tokens["PRODUCT-DESCRIPTION"] .= "<h3>" . $_additionalData["sub_heading"]["value"] . "</h3>";
					$tokens["PRODUCT-DESCRIPTION"] .= "<ul class=\"include-list\">";
					for($x = 0; $x < count($includesList); $x++) {
						$tokens["PRODUCT-DESCRIPTION"] .= "<li><h4>" . $includesList[$x]['heading'] . "</h4>";
						$tokens["PRODUCT-DESCRIPTION"] .= $includesList[$x]['text'];
						$tokens["PRODUCT-DESCRIPTION"] .= "</li>";
					}
					$tokens["PRODUCT-DESCRIPTION"] .= "</ul>";					
				}
				
				// Loop through each token and replace in template
				foreach($tokens as $key => $value) {			
					$templateContent = str_replace("%{$key}%", $value, $templateContent);
				}
				
				$template .= $templateContent;
			}
			$j++;
		}
	}

	$template = $templateHeader . $template . $templateFooter;
    
    

	$tmpFilename = $_SERVER['DOCUMENT_ROOT']  . "/dompdf/www/tmp/orderpdf.html";
	
	ini_set('mbstring.substitute_character', "none");
	
	// Save modified file contents to temporary file
	$tmpFile = fopen($tmpFilename, "w");
	//fwrite($tmpFile, mb_convert_encoding($template, "ISO-8859-1", "UTF-8"));
    fwrite($tmpFile, $template);
	fclose($tmpFile);
    
    $data = file_get_contents($tmpFilename);
   
   /* $myfile = fopen($tmpFilename, "r") or die("Unable to open file!");
    $data = fread($myfile,filesize($tmpFilename));
    print_r($data);
    fclose($myfile);
    exit;*/
    
    /*$tcpdf->AddPage();

    $tcpdf->writeHTML($data, true, false, true, false, '');

    $tcpdf->lastPage();

    $tcpdf->Output($filename.'_'.time().'.pdf', 'D');
       
    exit;*/

	Mage::log("Written file, now producing PDF");
	$url = "https://" . $_SERVER['SERVER_NAME'] . "/html2pdf/demo/html2ps.php?";
	$url .= "process_mode=single";
	$url .= "&URL=https://" . $_SERVER['SERVER_NAME'] . "/dompdf/www/tmp/orderpdf.html";
	$url .= "&pixels=600";
	$url .= "&scalepoint=1";
	$url .= "&renderimages=1";
	$url .= "&renderlinks=0";
	$url .= "&media=A4";
	$url .= "&cssmedia=screen";
	$url .= "&leftmargin=0";
	$url .= "&rightmargin=0";
	$url .= "&topmargin=0";
	$url .= "&bottommargin=20";
	$url .= "&encoding=utf-8";
	$url .= "&method=fpdf";
	$url .= "&pdfversion=1.3";
	$url .= "&output=1";
	$url .= "&smartpagebreak=1";
	$url .= "&filename=$filename";
	
	Mage::log("PDF created.");
	
    Mage::log("URL: " . $url);
	Mage::log("URL: " . $url,null,'url.log');
    //echo $url;  
	//exit('caled');
    header("Location: $url");
   // Mage::app()->getResponse()->setRedirect(Mage::getBaseUrl());
   //Mage::app()->getFrontController()->getResponse()->setRedirect($url)->sendResponse();
   exit;
            
?>